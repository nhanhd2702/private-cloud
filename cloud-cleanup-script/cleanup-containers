#!/usr/bin/env bash

# Logging function
log() {
    echo "$(date +"%Y-%m-%d %H:%M:%S"): $1" >> "/tmp/rm_container_script.log"
}

# Error handling function
handle_error() {
    echo "Error: $1" >&2
    # Add any additional error handling steps here
    exit 1
}

# Dry run option
dry_run=false

# Stop timeout
stop_timeout=2

containers_running=$(sudo docker ps --filter "label=kolla_version" --format "{{.Names}}")

QEMU_PIDS=$(pgrep -l qemu | awk '!/qemu-ga/  && !/qemu-img/ {print $1}')
if [[ "${containers_running}" =~ "nova_libvirt" ]] && [[ $QEMU_PIDS ]] && [[ $(ps --no-headers wwwup $QEMU_PIDS | grep --invert-match '\-xen\-domid 0') ]]; then
    log "Some qemu processes were detected."
    log "Docker will not be able to stop the nova_libvirt container with those running."
    log "Please clean them up before rerunning this script."
    exit 1
fi

if [ -n "$1" ]; then
    containers_to_kill=$(sudo docker ps --filter "label=kolla_version" --format "{{.Names}}" -a | awk '/pattern/ {print $1}')
    volumes_to_remove=$(sudo docker inspect -f '{{range .Mounts}} {{printf "%s\n" .Name }}{{end}}' ${containers_to_kill} | \
        egrep -v '(^\s*$)' | sort | uniq)
else
    containers_to_kill=$(sudo docker ps --filter "label=kolla_version" --format "{{.Names}}" -a)
    volumes_to_remove=$(sudo docker inspect -f '{{range .Mounts}} {{printf "%s\n" .Name }}{{end}}' ${containers_to_kill} | \
        egrep -v '(^\s*$)' | sort | uniq)
fi

if [[ "${containers_to_kill}" =~ "openvswitch_vswitchd" ]] && [[ "${containers_running}" =~ "neutron_openvswitch_agent" ]]; then
    log "Removing ovs bridge..."
    (sudo docker exec -u root neutron_openvswitch_agent neutron-ovs-cleanup \
        --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/openvswitch_agent.ini \
        --ovs_all_ports) > /dev/null
    (sudo docker exec -it openvswitch_vswitchd bash -c 'for br in `ovs-vsctl list-br`;do ovs-vsctl --if-exists del-br $br;done') > /dev/null
fi

# Stopping containers
if [ "$dry_run" = true ]; then
    log "Dry run: Stopping containers..."
else
    (sudo docker stop -t "$stop_timeout" ${containers_to_kill} 2>&1) > /dev/null || handle_error "Failed to stop containers"
fi

# Removing containers
if [ "$dry_run" = true ]; then
    log "Dry run: Removing containers..."
else
    (sudo docker rm -v -f ${containers_to_kill} 2>&1) > /dev/null || handle_error "Failed to remove containers"
fi

# Disconnecting containers from docker host network
for container in ${containers_to_kill}; do
    (sudo docker network disconnect -f host $container 2>&1) > /dev/null
done

# Removing volumes
if [ "$dry_run" = true ]; then
    log "Dry run: Removing volumes..."
else
    (sudo docker volume rm ${volumes_to_remove} 2>&1) > /dev/null || handle_error "Failed to remove volumes"
fi

# Removing link of kolla_log volume
if [ "$dry_run" = true ]; then
    log "Dry run: Removing link of kolla_log volume..."
else
    (sudo rm -f /var/log/kolla 2>&1) > /dev/null || handle_error "Failed to remove link of kolla_log volume"
fi

log "All cleaned up!"
